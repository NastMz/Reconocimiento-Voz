import numpy as np
import calculate as calc

folder = "records/"
commands = ["arriba", "abajo", "derecha", "izquierda"]
n = 125  # n√∫mero de grabaciones por palabra
nparts = 150  # numero de partes en las que se dividieron las grabaciones en el entrenamiento

a = b = c = d = 0

# Vectores de secuencia de energia promedio de cada comando
arriba = np.array([22092213677790.844, 21327319552174.062, 7430443200702.748, 1140797058128.887, 1912582425457.9775,
                   275330344824.8992, 126408400697.79344, 113192493931.89093, 104422309048.80794, 30471889501.31206,
                   17319016281.74357, 25816915759.285255, 13338904459.43262, 4099377610.3152084, 2701243274.724711,
                   2248813681.6714926, 2102151982.87108, 1195820884.2047632, 1156738568.2130125, 1374583874.126454,
                   1157089593.1247125, 1089363082.0864284, 1086596434.6377234, 1293152679.238012, 1112331320.1574128,
                   675790372.8248959, 223168820.47219703, 115497401.5675619, 40698960.000640325, 8601699.655079316,
                   1587191.099954651, 823643.6324782457, 735016.9682559022, 667321.45344022, 612049.8713439574,
                   567083.1071506606, 528081.971624295, 494336.94951196964, 462692.39337217034, 438231.6003102158,
                   413902.43787174067, 392013.07726846536, 373045.5455978776, 355771.0114453928, 339851.65775493864,
                   326845.7093573702, 313179.1726986686, 301092.48716873885, 291902.90007530485, 281007.5124183044,
                   271638.7593955363, 263286.1098190754, 256373.4090781362, 249741.76283474444, 243591.52183669206,
                   238025.11209683408, 232809.2343700458, 227736.03185282892, 221831.12551635955, 218149.3112710485,
                   215680.1544461582, 211023.04392968726, 207901.50285837747, 206073.68668800849, 202563.3057447444,
                   200974.87477962492, 197794.45227583844, 196301.85250030016, 193575.77857383213, 189418.03712973025,
                   186711.73022880932, 182968.40376936, 179675.9427556485, 179136.32879656545, 177921.6199880997,
                   178153.20991771523, 178522.1780439554, 180876.8570193669, 183281.87438421356, 187889.99701959992,
                   190568.4000751961, 193399.85376810835, 197176.2178703692, 198619.91136274466, 200949.47653402263,
                   203794.17918622476, 206568.4084501446, 208385.77981613827, 211734.19495272063, 216380.6328813182,
                   218786.1086261276, 223463.98647883674, 228728.18101201902, 233797.0815620663, 240010.81910336073,
                   244307.20790503346, 251198.9608596295, 258227.76423668707, 264749.1223136426, 273486.90025304974,
                   284633.1250888798, 293119.55450357863, 303698.8644585219, 316517.6846629353, 329886.5888294995,
                   343259.8660604634, 359493.4147298852, 376543.33639848954, 396695.921797068, 420581.1105564325,
                   443422.7291444867, 469849.450935492, 500343.0904282237, 535727.2040422945, 576713.713267885,
                   625279.1999523683, 680910.445425035, 751900.8839842721, 867559.8816229225, 2366090.0717238914,
                   13123993.048177, 46587431.78507846, 139514999.1817238, 315997666.6313817, 724599730.1531241,
                   1182244093.6231167, 1278981561.857659, 1077276456.9667563, 1062310213.8650097, 1286266598.4101315,
                   1335794033.3146355, 1114636128.2685435, 1339039256.5001252, 2351356070.923159, 2219857875.797344,
                   2581902101.3237143, 5387189147.879495, 16914738187.991213, 24825314615.109467, 17876239867.825825,
                   41848466042.02962, 113262260164.5372, 110157436874.39429, 149750188916.3538, 433187869322.38226,
                   2148624261725.5432, 1519763317614.6506, 11240353914017.697, 19332867970347.535, 19456750776738.637])

abajo = np.array([13477889374219.033, 16690381920677.748, 28396010128715.645, 5715984664574.039, 1375614845476.5745,
                  41319509176.97962, 16589278405.03242, 31925530680.38493, 77182404948.90997, 23236896286.838715,
                  18579639701.018764, 28722700244.57061, 16825010997.206861, 3444378500.617636, 5122727981.9080105,
                  4829812313.85993, 3778996372.7764087, 2295603458.428898, 2254791105.465614, 2092381331.0179243,
                  1741160292.066717, 1630881282.5968056, 1548651872.4764209, 1873572251.5157657, 1743502408.49548,
                  1085268345.8366716, 385242165.6470599, 192347309.75545922, 66468982.61001557, 13621384.019366512,
                  2556921.8351441575, 1323745.855665866, 1202309.8783429798, 1118886.4736403306, 1043011.498228492,
                  976419.836200512, 916179.4722147152, 865774.960861999, 817338.6703558995, 778342.8299115499,
                  741841.9909244031, 707193.8732924331, 678135.5426212059, 649914.7913698227, 623626.6925924872,
                  601536.5883401025, 580427.71534938, 560463.131006102, 543285.253780491, 527365.993958711,
                  511714.7335860058, 498015.60627146624, 485236.45776441455, 474251.1878484886, 463126.29491382703,
                  453606.43677455786, 444254.94460081594, 436496.08631291596, 426648.5990096112, 420065.00412028783,
                  414930.5292039667, 406992.9528124351, 401994.2299092384, 397887.8579152804, 393104.6705515557,
                  388908.3729525024, 384515.62963276624, 381002.96059710666, 377223.49838602974, 372411.7557508175,
                  368182.213935002, 363858.2018574056, 359970.4402925654, 358320.5847194737, 357250.80662746617,
                  357008.81845920195, 358483.80582830653, 361369.41749791865, 363896.8865567668, 369929.9845544064,
                  373977.06815785845, 377240.635568016, 381723.996308297, 385862.668664369, 389498.1593213048,
                  394746.12628532987, 398759.5354012568, 402954.6929705937, 408736.6124567963, 415410.586375058,
                  421628.9244760895, 429625.358083476, 437937.0687886, 445782.7226282775, 456846.1809004879,
                  464355.3246752828, 476985.51294622006, 488817.38871358876, 500513.272594701, 515028.93073188816,
                  530866.545106316, 547040.5103264389, 564765.8686370661, 585643.9522295737, 606785.6137581666,
                  629118.0741710119, 656395.0227140418, 684147.5697422171, 715005.2239526549, 749449.3335916752,
                  787288.0931338214, 828236.4315704476, 876491.2112973031, 929268.8166343826, 991720.7744460071,
                  1058794.6406164197, 1136347.4970858265, 1225975.20479828, 1390517.2658875368, 3678352.7225539684,
                  21237196.326248977, 76181003.7256378, 230416585.06182784, 527787797.1547509, 1179275346.7396333,
                  1863473049.20439, 1809350964.2377272, 1518417559.4020572, 1664971239.753571, 1795311693.8731134,
                  2239654906.172264, 2134135608.978791, 2475958647.447778, 4499836587.834396, 4745598850.757467,
                  4549986970.6708145, 4064786497.850152, 23179878872.563427, 26036774409.855595, 17711246924.221912,
                  32117219012.86603, 77698019349.93425, 22101834898.40773, 18915751206.59461, 94506835602.96468,
                  1973965379972.91, 8292531446888.252, 36418548567286.34, 6826939132190.989, 12082725660297.885])

derecha = np.array(
    [52131496880188.51, 40689873203427.31, 793226482913.9565, 132843067633.43683, 134970535976.91542, 954407752427.5645,
     402817611457.97235, 262129089315.5496, 463441560537.90155, 117355674775.09576, 85679262748.06476,
     188969902593.7321, 143523510679.60074, 21817795602.74975, 28367967388.494556, 21489275320.9366, 11484316170.670185,
     6580131008.574733, 7246534561.424912, 8782434906.519253, 8974991050.445963, 5656267042.2350235, 5965768995.542352,
     12201501861.016497, 15009200054.980684, 5303705440.474893, 905596596.7907319, 342198853.22318524,
     198655150.45116383, 89720514.13749988, 9619001.831879772, 738384.6562618667, 612309.8173469481, 570915.0243788118,
     532101.3982303891, 497682.8081714423, 471016.7109841833, 443773.56781782187, 421779.6423411342, 403237.9968610079,
     383754.025440489, 365931.82085491886, 351758.941680894, 337251.2272303458, 324662.0798689648, 313289.48379508057,
     302843.64786323986, 292130.23943443643, 285407.82719433727, 276463.4183795785, 268534.24609247776,
     261197.59431907043, 255390.19912943378, 249985.04233395602, 244741.6845566606, 239615.19257076923,
     234909.6688841179, 231174.434093425, 225456.0672612626, 222031.0351132031, 220583.64180649372, 215447.3424855062,
     213528.17308260224, 211776.55799097018, 208948.42265929052, 207209.8441315261, 204241.48430049387,
     202841.967029796, 201084.64907604948, 197820.76172766462, 196008.93359556585, 194194.93547056377,
     191885.86395352162, 191834.71693691067, 191117.62480569162, 191062.29063399282, 191499.20412720725,
     192816.26581011966, 193972.27969918237, 197102.61747476688, 198643.51254341763, 200963.37200390783,
     203139.13980854212, 205221.3559975674, 207326.79189054624, 209968.08967856268, 212106.48150153112,
     213866.3479515216, 216466.09371632643, 220580.5951966167, 222956.3153408719, 227074.68134922738,
     231922.20311171934, 235813.18484723664, 241343.0957967068, 244893.79093260653, 251681.86338307618,
     257053.048075756, 262609.7510257806, 269922.10429256473, 278982.0452760225, 286678.0671869582, 294082.07218798145,
     306179.1876921824, 315475.70693854825, 326520.0237697489, 341309.6934201746, 354806.10821804253,
     369937.90095330274, 387694.18360639317, 407449.5178561354, 426888.0313891585, 449225.3977776441, 476415.0431256821,
     505865.62866616284, 540526.4699219945, 580331.868917885, 626265.995434883, 930035.6675510877, 20156446.24390183,
     115517108.92415042, 211777221.13771644, 394644800.8900279, 1304239896.0824618, 6917108080.623435,
     16340345938.170866, 10662099678.048008, 5214182869.902564, 5893788842.86308, 9409099729.984941, 9152520081.682512,
     6060051718.917968, 7458094959.813517, 13968623612.8261, 25666363676.161674, 22664839066.77623, 34072582730.878216,
     183530197470.37265, 156797175723.28943, 78825435833.29913, 164511172202.35693, 465046887793.9543,
     245080135173.78268, 659453217531.9219, 683196658955.0117, 125531358551.95549, 196195066681.18402,
     3705807115282.8965, 42404211351764.2, 47415944414383.9])

izquierda = np.array(
    [36743644633698.82, 36264741431031.76, 976566376880.5043, 108704264281.61276, 272299660613.2476, 247238882200.61017,
     556101503199.205, 346800465180.30707, 487705808449.4275, 241037666874.44827, 191069233827.8288, 163091296343.20773,
     132260819584.51631, 197670545818.40182, 177317308930.0546, 252454301976.78726, 192183989002.87735,
     122422426995.73412, 88201513388.5677, 83406293351.63892, 102825414390.08154, 100019046534.31473,
     111317999942.42734, 96784673888.85568, 94776414248.78908, 48787917936.0762, 12839590880.05913, 5089702461.739229,
     2255715502.0236874, 684489690.7162338, 51671282.74155322, 2238856.885912421, 938216.5524180909, 859246.2110629071,
     792884.0084709625, 737257.9878529817, 684460.809555425, 644142.8116018078, 605853.4672882281, 573538.7020821963,
     543683.0280382525, 515655.72295837605, 492477.0658633672, 470220.3445732169, 451008.2435036633, 434142.6822311363,
     416759.00000433426, 401543.8566032335, 389636.20404867915, 375993.6714933384, 364279.2416655889, 354105.1119134594,
     344150.1725488824, 335653.6184222681, 328473.36845359276, 320737.37745114096, 313796.62246795365,
     307494.79237298074, 300192.6629961922, 295162.99008923135, 292130.6614867481, 285559.9795702804, 281715.5028721449,
     279002.96930473146, 275011.4154980006, 272384.68292675505, 268488.3084224633, 266407.29780202947,
     263084.76223831903, 257752.58577252587, 253797.33139501832, 249638.64599514555, 245397.1136542188,
     244393.45412822496, 242819.3923493498, 243004.03150290868, 244177.51775088612, 246795.64341468428,
     250159.44602653765, 255147.61170325102, 259213.34853515038, 263173.98868705524, 267182.449342798,
     269558.93027724733, 272643.030261166, 276245.2632081551, 279484.0075355419, 282528.67762616643, 287134.4616146331,
     292576.19874427916, 295815.1036789835, 302378.66353339446, 308995.5178737245, 314909.1283599192,
     323252.02103557874, 328961.44022244954, 337906.5983563612, 346983.8792250332, 355886.3722684795, 366754.157576,
     379309.3291689306, 392075.8113178485, 404875.2999736358, 421112.46828749025, 437497.5003228811, 454963.3038975959,
     475753.26531303313, 498653.75260419975, 521479.86775118473, 548685.1187227932, 580822.9072141843,
     615263.9663086429, 651941.3552452786, 697114.3493721682, 746870.9491284474, 807385.8543891226, 877171.8693362041,
     969347.9468460056, 3732406.53762918, 110095947.71755387, 1014466102.4044255, 2640568922.958409, 6445557535.871628,
     16639252768.777067, 61124728963.32702, 100481671923.77335, 101032848959.65062, 114250236093.08597,
     88084471105.77162, 107974771359.56772, 75675467755.06578, 100178387982.89099, 129167991768.95914,
     211849809219.24622, 247935443881.06644, 156468777662.22693, 213669569050.41772, 121040710720.32425,
     175756209315.9094, 174967413632.42532, 303535778294.96606, 498362358043.08997, 357632251424.8891,
     516677002270.7803, 256659100992.38995, 209523372815.01434, 183398538274.2705, 2251837295475.888,
     41149653632232.695, 30484776929495.867])


# FUNCI√ìN PARA ENCONTRAR EL COMANDO EN BASE A LA ENERGIA
def find_command(energy_seq):
    # Se restan la energia promedio de cada comando con la de la que se capta en tiempo real
    # Para ver cual tiene menor diferencia
    differences = []
    up = abs(arriba - energy_seq)
    down = abs(abajo - energy_seq)
    right = abs(derecha - energy_seq)
    left = abs(izquierda - energy_seq)

    # se separan las diferencias por parte
    # Por ejemplo si tuvieramos estas diferencias:
    # up = [1,2,3,4]
    # down = [5,6,7,8]
    # right = [9,1,2,3]
    # left = [4,5,6,7]
    # Entonces este for haria lo siguiente:
    # differences = [[1,5,9,4],[2,6,1,6],[3,7,2,7],[4,8,3,7]]
    # Es decir que crea un vector que tiene dentro vectores con las diferencias de cada parte
    # independientemente de el comando
    for i3 in range(0, nparts):
        difference = [up[i3], down[i3], right[i3], left[i3]]
        differences.append(difference)

    # luego con el vector que se creo se busca cual fue el menor de cada parte
    # siguiendo con el ejemplo anterior:
    # differences = [[1,5,9,4],[2,6,1,6],[3,7,2,7],[4,8,3,7]]
    # se busca el menor de cada uno y se guarda la posicion,
    # para la primera parte el menor es 1 por eso se guardaria 0 que es la posicione en la que esta,
    # entonces quedaria asi:
    # min_differences = [0,2,2,2]
    min_differences = []
    for i4 in range(0, 4):
        index = differences[i4].index(min(differences[i4]))
        min_differences.append(index)

    # Ahora se maneja una especie de sistema de puntos para encontar el que tuvo menor diferencia
    # Para esto entonces se cuenta cuantas veces aparece una posicion
    # En el caso del ejemplo, ya que tenemos 4 posiciones entonces contamos cuantas veces estan
    # 0, 1, 2, 3 en el vector min_differences:
    # count = [1, 0, 3, 0]
    count = []
    for i5 in range(0, 4):
        count.append(min_differences.count(i5))

    # Luego se mira quien fue el que tuvo mas "puntos" y se toma ese como el comando que probablemente
    # se dijo
    return commands[count.index(max(count))]


# -------------------------------- IGNORAR ---------------------------------------
# Esto sirve para comprobar que tan exacto es el algoritmo despues de entrenarlo,
# usando las grabaciones como si fuera alguien hablando en tiempo real
#
for i in range(0, len(commands)):
    print("_______________" + commands[i].upper() + "_______________")
    for j in range(1, n + 1):
        file = folder + commands[i] + str(j) + ".wav"
        ffts = calc.calculate_fft_record(file)  # se calcula la transformada de fourier de la grabaci√≥n

        parts = calc.split(ffts, nparts)

        energy_sequence = []
        for k in range(0, nparts):
            energy_sequence.append(calc.calculate_energy(parts[k]))  # se calcula y guarda la energ√≠a de la parte uno
            # del vector
            # de la transformada de fourier de la grabaci√≥n

        command = find_command(energy_sequence)

        if command == "arriba":
            a = a + 1
        elif command == "abajo":
            b = b + 1
        elif command == "derecha":
            c = c + 1
        elif command == "izquierda":
            d = d + 1

    print("arriba: " + str(a))
    print("abajo: " + str(b))
    print("derecha: " + str(c))
    print("izquierda: " + str(d))
    a = b = c = d = 0
