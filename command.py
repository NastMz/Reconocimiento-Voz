import numpy as np
import calculate as calc

folder = "records/"
commands = ["arriba", "abajo", "derecha", "izquierda"]
n = 125  # número de grabaciones por palabra
nparts = 100  # numero de partes en las que se dividieron las grabaciones en el entrenamiento

a = b = c = d = 0

# Vectores de secuencia de energia promedio de cada comando
arriba = np.array([21938732554609.66, 11996658427512.998, 1571530335488.4075, 652726498707.4073, 124628124613.96944,
                   105031479561.38684, 26411478340.03353, 22919818937.714546, 10819104681.256857, 2813268100.883606,
                   2350082869.1687083, 1363946815.7441838, 1249101253.5001395, 1214137446.707006, 1085712559.772223,
                   1222278678.073999, 1016653510.8192786, 345041282.03260744, 97991469.54981692, 15752918.715450376,
                   1408283.2018752072, 756038.3196133064, 655873.777808002, 579829.3805332194, 520154.75157611305,
                   472043.31015202205, 433355.6825544063, 397966.0990076528, 369408.96712853503, 344976.6981952452,
                   323522.6505039894, 304847.47734590847, 289858.3696631292, 274614.53275681235, 261623.6920826052,
                   252059.3115540857, 242346.0491113099, 234879.12780738846, 226093.29419114342, 219523.7800692342,
                   214408.1451184218, 208841.97895885626, 205056.35807232538, 201534.83723042277, 197510.1359664066,
                   194467.4477779934, 189165.0056451675, 184234.75453667456, 179990.32559170623, 178009.9648160382,
                   178036.78179846593, 180205.33329144333, 184379.66265419655, 189444.25357715084, 194543.74886796554,
                   197788.36540040336, 201635.83996970818, 205398.468898606, 209088.0226698574, 214805.63213001122,
                   219576.7553064225, 226433.32218300705, 235361.20343841374, 242582.0744845526, 252324.41125590718,
                   262285.6578887293, 275277.636515252, 290077.22034629167, 305532.9543465977, 324406.1441254008,
                   345861.88755925535, 370453.44785522734, 399392.93628280243, 434719.6136992831, 473574.76263578515,
                   522975.60504588636, 581616.8189649703, 659881.938190377, 760776.0161910744, 1547138.2747363136,
                   17403195.11389469, 101565607.37990303, 365328681.05778635, 1037264839.0384132, 1218526587.4941342,
                   1079310675.036203, 1224645598.838835, 1244391181.300055, 1406683515.792234, 2372485101.2827935,
                   2895304154.837346, 11460288453.975864, 22665781745.796505, 28220152684.131172, 106748145489.33154,
                   125175552984.16064, 736393667117.9509, 1571264796609.2249, 12278745206525.805, 21567462648875.81])

abajo = np.array([10914060122116.732, 28152964196168.855, 4529431311812.313, 251286585669.7214, 16770120448.376945,
                  66846413368.94759, 21441493993.501064, 25627416776.584595, 12761194341.775404, 4518136113.91218,
                  4864164842.650715, 2449174695.693603, 2245554170.9414806, 1814524015.6976182, 1632963123.9390593,
                  1729886277.490053, 1607445210.2421563, 570133727.1631869, 162247555.73149687, 25457718.125644896,
                  2275022.5259111384, 1231028.5485179625, 1101977.90899984, 995844.0688164514, 906010.2916504501,
                  831008.7453878295, 771042.9464523142, 716982.0123920705, 672502.451045446, 631516.1952482762,
                  597144.9862307885, 566451.0482710231, 540017.3926572559, 516942.12102619454, 495204.2672245957,
                  477673.1915223757, 461073.8462320055, 447629.70407650806, 433943.2489078798, 422433.02211466496,
                  413047.96116307116, 403652.6055876288, 396897.9959649243, 390073.4134719272, 383716.01052087964,
                  378436.14108721743, 371766.5869777123, 365202.32708759705, 360326.6991727625, 357195.6780469903,
                  357189.87810776115, 360468.8282032726, 365467.747963166, 372129.382311967, 378702.05721465626,
                  383924.73326725845, 390368.83865426085, 397331.66540678695, 403931.8493794849, 413506.72734580864,
                  422753.981932576, 434557.1316569048, 448132.7110557207, 461535.83512366196, 478454.2964056145,
                  496119.9263639214, 518061.9096832825, 540567.227623979, 568003.4354748304, 598079.5765198404,
                  633144.9769995749, 673974.2151480854, 719174.6586784659, 773309.4370096821, 833830.7606402747,
                  908684.8919339912, 999863.0322238804, 1107266.678058413, 1237220.9457223467, 2469494.681491185,
                  28350957.70479527, 167440670.48359635, 603944663.2251606, 1636745017.438807, 1709956361.5294514,
                  1653202962.1181536, 1836376165.7841756, 2221439773.4979954, 2532234300.824569, 4911077208.378933,
                  4469254868.897693, 13918760106.619694, 24972159180.79328, 22802027037.610775, 65724275998.81199,
                  16677102127.002787, 331559996257.6964, 4814899350289.958, 28029891103254.58, 10669268191433.088])

derecha = np.array(
    [49744808761089.484, 12735404182970.02, 128760723773.34717, 683850119888.1055, 350151432330.808, 404608955951.1933,
     106718949573.82114, 154385778529.8176, 107471487111.47536, 23896660029.25847, 19374665489.6801, 7262287440.8696165,
     7880064554.278968, 8776083848.979988, 5369480112.142664, 10273609322.418453, 12884984921.204914,
     1603622962.8955421, 308972802.19371605, 120568722.25521187, 7371819.391496287, 632423.5587300248,
     562003.1645905714, 507603.37185896223, 465086.5709590668, 427727.46516769915, 399246.5514287995,
     370998.47068369645, 349330.3077715794, 327877.71371952136, 311230.8510904922, 295451.1283882232, 283435.9696209367,
     271114.43559344875, 259889.49485324265, 251805.58225298207, 243400.26697856543, 236852.5244315512,
     229532.50417681018, 223483.84627796456, 219144.79784136187, 214051.4522510506, 210981.71434407192,
     207820.700264174, 203792.4725983214, 201659.52108853628, 197471.4057203606, 194961.76868875042, 192417.33623331384,
     190986.49282286948, 191011.47522321244, 192507.88707778437, 194999.35078395595, 197784.33103145572,
     201709.32373343688, 204036.8639290762, 207882.45602784114, 211390.31111580812, 214180.28974343248,
     219381.34623557352, 223640.5924999052, 229837.04102955278, 237135.4245713098, 243600.15718787446,
     252208.9049336062, 260412.45855775254, 271355.73633718694, 283984.0854429606, 296071.2694444019, 311850.9124468989,
     328769.8988158003, 349889.47324721987, 372229.6719509828, 400377.7926857857, 429023.29236555414,
     466054.62167204224, 509860.66558974265, 564101.7231628242, 636059.8550856523, 8980348.874229603, 126342711.7316402,
     317243796.9728599, 1806656649.337852, 13271036566.099264, 9870742826.612003, 5423386037.75772, 8860093586.954292,
     7686202280.502438, 7570484942.630317, 20456303798.484524, 23126564540.607067, 117706070069.29745,
     146719451232.6567, 113058344421.6163, 405029799580.6213, 368735439945.7335, 661874454578.5647, 130959578301.52618,
     14802847291931.941, 47667460698500.54])

izquierda = np.array(
    [40196833081790.94, 9182089921805.525, 127520405906.70964, 290638426656.76624, 470033415799.19727, 456502298958.842,
     222948732841.26584, 176273954963.16748, 160731439452.7596, 176833918566.91647, 243152443290.0105,
     135830274071.68279, 84176776427.25993, 99520445078.9831, 102207589934.02686, 102283410440.23912, 85422652594.82803,
     21018054092.68079, 4341358237.047825, 1177374664.190411, 41056125.53341265, 1027286.1900708519, 846780.9906732185,
     751947.5267266447, 676187.7124543033, 616821.7795450246, 566952.6582032607, 524327.2060440875, 487836.00388307404,
     456702.0741532207, 430124.1231539438, 406412.9797648978, 386705.5151425716, 368164.20571444865, 351651.06537485484,
     338520.0217771877, 326749.0590576444, 316266.36263471143, 305833.86574791913, 296804.45413393434, 290374.531122596,
     283142.5192957354, 277832.6359691626, 273205.60719507927, 268146.76375390205, 264162.9824298865,
     257096.49686790613, 251060.95103095766, 245840.1118070304, 242965.4509695195, 243084.09488788713,
     246006.3800264564, 251270.63977638882, 257532.4037492313, 264272.6207158505, 268443.1245264952, 273213.6930314977,
     278426.04293422494, 283375.72115443007, 290646.2249372306, 297084.29273844516, 306350.1328000145,
     316659.1608716589, 326925.7805439566, 339037.98426147556, 352672.4629402875, 368853.323644307, 387176.7841772856,
     407212.72237126593, 431133.0387827853, 457639.9809168046, 490101.4290627257, 525128.3149809982, 569470.5471060319,
     618838.8465777113, 678756.1772408693, 755089.6031327253, 850134.1595818349, 1061990.965024583, 49185110.678671576,
     1287673191.698752, 4641913625.002353, 23021075999.97731, 87144895565.84073, 100817997428.97214, 102932968074.31514,
     98892331120.01758, 86244138053.89651, 139820080948.68298, 242311178531.70023, 175171788393.16473,
     159865044042.92587, 177050774488.51144, 230677101408.87625, 458446454217.96954, 464329790018.01056,
     293896687177.3904, 123082249004.49358, 11894472158617.982, 37474230382181.7])


# FUNCIÓN PARA ENCONTRAR EL COMANDO EN BASE A LA ENERGIA
def find_command(energy_seq):
    # Se restan la energia promedio de cada comando con la de la que se capta en tiempo real
    # Para ver cual tiene menor diferencia
    differences = []
    up = abs(arriba - energy_seq)
    down = abs(abajo - energy_seq)
    right = abs(derecha - energy_seq)
    left = abs(izquierda - energy_seq)

    # se separan las diferencias por parte
    # Por ejemplo si tuvieramos estas diferencias:
    # up = [1,2,3,4]
    # down = [5,6,7,8]
    # right = [9,1,2,3]
    # left = [4,5,6,7]
    # Entonces este for haria lo siguiente:
    # differences = [[1,5,9,4],[2,6,1,6],[3,7,2,7],[4,8,3,7]]
    # Es decir que crea un vector que tiene dentro vectores con las diferencias de cada parte
    # independientemente de el comando
    for i3 in range(0, nparts):
        difference = [up[i3], down[i3], right[i3], left[i3]]
        differences.append(difference)

    # luego con el vector que se creo se busca cual fue el menor de cada parte
    # siguiendo con el ejemplo anterior:
    # differences = [[1,5,9,4],[2,6,1,6],[3,7,2,7],[4,8,3,7]]
    # se busca el menor de cada uno y se guarda la posicion,
    # para la primera parte el menor es 1 por eso se guardaria 0 que es la posicione en la que esta,
    # entonces quedaria asi:
    # min_differences = [0,2,2,2]
    min_differences = []
    for i4 in range(0, 4):
        index = differences[i4].index(min(differences[i4]))
        min_differences.append(index)

    # Ahora se maneja una especie de sistema de puntos para encontar el que tuvo menor diferencia
    # Para esto entonces se cuenta cuantas veces aparece una posicion
    # En el caso del ejemplo, ya que tenemos 4 posiciones entonces contamos cuantas veces estan
    # 0, 1, 2, 3 en el vector min_differences:
    # count = [1, 0, 3, 0]
    count = []
    for i5 in range(0, 4):
        count.append(min_differences.count(i5))

    # Luego se mira quien fue el que tuvo mas "puntos" y se toma ese como el comando que probablemente
    # se dijo
    return commands[count.index(max(count))]

# -------------------------------- IGNORAR ---------------------------------------
# Esto sirve para comprobar que tan exacto es el algoritmo despues de entrenarlo,
# usando las grabaciones como si fuera alguien hablando en tiempo real
#
# for i in range(0, len(commands)):
#     print("_______________" + commands[i].upper() + "_______________")
#     for j in range(1, n + 1):
#         file = folder + commands[i] + str(j) + ".wav"
#         ffts = calc.calculate_fft_record(file)  # se calcula la transformada de fourier de la grabación
#
#         parts = calc.split(ffts, nparts)
#
#         energy_sequence = []
#         for k in range(0, nparts):
#             energy_sequence.append(calc.calculate_energy(parts[k]))  # se calcula y guarda la energía de la parte uno
#             # del vector
#             # de la transformada de fourier de la grabación
#
#         command = find_command(energy_sequence)
#
#         if command == "arriba":
#             a = a + 1
#         elif command == "abajo":
#             b = b + 1
#         elif command == "derecha":
#             c = c + 1
#         elif command == "izquierda":
#             d = d + 1
#
#     print("arriba: " + str(a))
#     print("abajo: " + str(b))
#     print("derecha: " + str(c))
#     print("izquierda: " + str(d))
#     a = b = c = d = 0
