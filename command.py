import numpy as np
import calculate as calc

folder = "records/"
commands = ["arriba", "abajo", "derecha", "izquierda"]
n = 125  # n√∫mero de grabaciones por palabra
nparts = 120  # numero de partes en las que se dividieron las grabaciones en el entrenamiento

a = b = c = d = 0

# Vectores de secuencia de energia promedio de cada comando
arriba = np.array([20003132932004.336, 18909775873118.523, 2360406194779.283, 1905654111861.3374, 251311150757.12167,
                   120646775705.6979, 111313075531.73291, 39554363615.77111, 18479578928.80332, 23126924987.76877,
                   6639390651.376309, 2610384771.229769, 2356531519.5912023, 1685491171.7442045, 1093795639.8659832,
                   1345162890.0475004, 1181538642.585951, 1057664578.0089967, 1238615602.7631032, 1131121741.120447,
                   625332463.0870864, 180358688.43898022, 54614361.85112221, 12355378.19923573, 1540254.975315014,
                   785010.7688175006, 695356.5132420793, 621238.4353763091, 564989.9743910871, 515983.5336401449,
                   475165.02015270304, 443010.1346604392, 412716.3684020868, 384763.0577162044, 363524.802200837,
                   343268.1889596526, 325594.8549302459, 309515.61710883543, 295554.0420670525, 283319.210704442,
                   270867.16699926555, 260882.60791869974, 252801.60967646434, 245302.73126912204, 237405.09655786597,
                   231938.9473948241, 223893.088768049, 218929.0869230018, 215078.20087702264, 210054.19214387532,
                   207152.4689518719, 203682.97405967265, 200343.5708643522, 197261.55539644393, 194811.56922905985,
                   190374.10777970796, 186484.4100946288, 182220.69807348828, 179386.00130339793, 178013.87085386197,
                   178226.071976227, 179340.60031749457, 181794.95241353617, 186578.99962890902, 190793.80094918745,
                   194948.6335213106, 197204.36188562328, 200724.34741171345, 203546.9284908475, 206792.63441769118,
                   210283.90864959496, 215538.25998664566, 219073.11526704405, 223865.7893349806, 232190.9938372539,
                   237480.01641755228, 245095.9309849189, 252871.73028872875, 261345.34551634017, 271380.97503339936,
                   283466.6079399344, 295635.38827718346, 310036.69599321694, 325830.61675775406, 343197.8084490588,
                   364066.5609075007, 385890.368019118, 413580.10380253365, 443448.05829899665, 475509.5747421808,
                   516808.68423872103, 565501.0264952915, 622810.6052097457, 696727.9790525959, 788540.9473894307,
                   1613008.1972839017, 12947978.687314404, 56082402.98901426, 182541021.2823968, 635791982.5821465,
                   1144396101.8419456, 1232643530.4476697, 1064303240.470893, 1185019533.8761587, 1339827195.7655551,
                   1086533032.3046257, 1729146438.0466843, 2344957646.9906826, 2614626293.8302603, 6838210998.415505,
                   23640242268.4801, 18151473077.71034, 40482040073.24481, 111612951252.44366, 121616173169.6494,
                   260377813112.5231, 1915150147385.3389, 2393696449375.2803, 19690883277475.1, 19166176384024.67])

abajo = np.array([11943181928866.23, 28598822127859.727, 10368355477638.453, 1685497789233.5088, 37380736032.8497,
                  16092563744.402699, 68745099597.67862, 30429161904.544292, 19570590237.613735, 28677219196.156116,
                  5415425080.622647, 4654658874.978933, 4959133577.107016, 2968461715.6277494, 2174479958.6774354,
                  2156333542.895285, 1783595265.4902887, 1577447217.9048848, 1709959888.816419, 1779210780.710536,
                  1012386447.3954108, 304914529.70265293, 94021812.0482724, 20084582.55831896, 2489182.9602366285,
                  1272744.6617737107, 1152533.325698138, 1055562.4018228883, 971780.7952197614, 899936.6237862263,
                  837049.4692374974, 785272.0131330608, 738576.6860691933, 697258.0562503187, 662217.2879288171,
                  629006.9428865358, 600044.4549948185, 574239.9189700759, 550597.047414692, 530030.4025245772,
                  511074.4869856181, 493851.5140812279, 478992.0220074467, 465743.2676945528, 452820.4296768557,
                  442465.1234060179, 430388.95974760095, 421557.77172701654, 414036.1225935956, 406093.488516012,
                  399360.8059856684, 394765.26996305847, 388173.8241482392, 383263.22092571185, 378949.3924915987,
                  373489.57707030076, 368106.59950628487, 362751.3994580365, 359558.2677762741, 357001.0651187389,
                  357244.6319306229, 359408.8256473903, 362305.56726485473, 368323.21163654537, 373971.1294803436,
                  379166.26251978846, 383196.0968853748, 388514.7540761329, 394745.1048154413, 399135.35707946436,
                  406108.1279141103, 414651.5572371937, 421696.26122951566, 430726.00137367344, 442507.81766541774,
                  453210.876254436, 465607.2285853708, 479186.93681696575, 494411.5378758257, 511723.2897211606,
                  530277.4783855121, 551201.3801638844, 574729.1157425551, 600358.8378001517, 629158.9103112984,
                  663170.0092524025, 698352.6385999937, 739447.4964297205, 786295.9613700069, 838374.9448227941,
                  901327.5322293916, 973508.8591962764, 1056625.803303394, 1155399.993557789, 1275504.3712149123,
                  2591913.9691205653, 20948067.48712615, 96985024.32251218, 308580422.4994813, 1030696628.9176489,
                  1794353536.7108102, 1695363837.4278553, 1592530644.5562901, 1778601201.2498512, 2165875777.1227126,
                  2179095319.6420546, 3035816864.7361403, 4938608966.75647, 4615696982.415004, 5651237821.27242,
                  28838556664.55378, 19513261438.20598, 31280210559.720005, 67922898216.57892, 15990202967.225483,
                  39186001931.983604, 1745237817547.8943, 10725799585758.035, 28471270898521.324, 11649828124060.965])

derecha = np.array([49399741793898.016, 25428222447049.71, 251341031377.35922, 128160681035.80284, 888621581681.0188,
                    292515974219.4741, 430229255804.92017, 151039169940.4152, 89917113661.19771, 207223654000.1865,
                    53489602035.675125, 25063196249.88746, 20280907335.878246, 9379505966.408028, 6227299745.409993,
                    8897499202.770424, 8569577157.396929, 5097109873.878767, 9244081245.56941, 15300991812.762577,
                    4777877536.918962, 598747802.3907378, 223606025.0714397, 109506215.0222536, 8879021.886012431,
                    663074.8030244133, 588473.5934333579, 539241.1228527399, 496222.00453978626, 461620.9237981571,
                    430856.39841921214, 406502.1943531987, 381793.7173582034, 360969.9605481819, 343757.6605288063,
                    327158.3169275062, 312446.6864551924, 299784.1901281213, 288047.49017303775, 278015.3434811649,
                    268211.90610655484, 259161.3322382484, 252411.24197207915, 246179.71191941458, 239166.8099963588,
                    234379.78299659156, 227185.0439167668, 223098.93130289443, 219686.0473846844, 215218.51993176498,
                    212565.65006978213, 209834.57363101584, 206727.10774138244, 203591.9873445645, 201905.5059181152,
                    198495.9298188563, 195997.90502857172, 193728.01387973363, 192143.89531675918, 190906.42909790904,
                    191187.25845244114, 191968.96287535084, 193328.62952893495, 196095.71158147173, 198923.04735437213,
                    201977.96800533318, 203546.69142010613, 207058.57778061193, 209702.1256496192, 212284.19425122996,
                    215186.73482516434, 220192.185345399, 223212.63720328183, 227284.36719708715, 234461.0012069302,
                    239386.71568413993, 245949.82427653042, 252406.13944300052, 259538.53029305313, 268738.34709229675,
                    278079.275003215, 288300.29645570024, 299954.0926725173, 312638.81964019826, 327229.60217203014,
                    344152.2760203973, 361704.0690510553, 382383.6776992312, 406994.71164371277, 431391.89829304157,
                    462193.19272536214, 496264.4303648458, 540515.0907146325, 590436.708682015, 667073.8448282692,
                    9698070.763932956, 111849140.4852396, 226622253.9470503, 616890441.1880211, 4918528737.198084,
                    15474296704.659473, 9007691597.029852, 5109156561.592181, 8605155824.421251, 8917964190.356512,
                    6200740784.166219, 9527878322.487926, 20615658594.183647, 24773040043.71036, 55890376947.07147,
                    207576223504.5369, 88538568415.11311, 155150530125.18704, 428357263783.5587, 298703834552.1924,
                    881655578826.9286, 126781661500.73172, 257192044961.74332, 27094933288605.098, 47724181973134.16])

izquierda = np.array([37738512940846.61, 21311658362249.99, 286212158828.98474, 235969115625.28073, 265440677378.1125,
                      495994753200.91284, 466570090645.7485, 276887552386.4268, 188921190091.40668, 139215250306.72498,
                      192769511166.58148, 167755964558.99466, 240254634869.56046, 172530296714.24042, 98677344355.97223,
                      80769270496.50859, 101993268662.00038, 104102452241.12872, 101208398182.97757, 98906444808.8271,
                      43507433957.5111, 9720797777.527874, 3162922814.5285316, 962706611.4860427, 49857199.44650409,
                      1366718.583795668, 892422.4155156586, 802538.2250590725, 732543.0751305918, 672037.6351403053,
                      622017.2246472543, 578528.2168424523, 541371.3247452857, 507547.9760685117, 480561.44694876875,
                      454718.0327313717, 432389.99599535187, 412702.19107078447, 394302.5650618004, 378393.31740893243,
                      363670.25118810823, 350846.15425520606, 339628.6317696002, 329998.05399729643, 320237.53069372516,
                      312587.15991753864, 302857.55945704033, 296191.9356377345, 291133.1917743251, 284643.03941138205,
                      280400.17880423844, 276133.25770288974, 271919.8719522955, 267802.6201247009, 264494.7295283358,
                      258965.22985829122, 253761.0571260693, 248568.0288414169, 245098.6897558364, 242771.8988563241,
                      243030.36415700993, 244986.76602765193, 248234.36948296888, 253888.73080658747,
                      259437.30084990722, 264644.2842108882, 267765.4781696735, 272267.3967956046, 276009.05188513297,
                      280102.0906963676, 284720.3502038609, 291667.3381791665, 296347.60231468553, 302985.58505513676,
                      312745.53892243566, 320409.6217156526, 330026.67267533083, 339635.4980131693, 351268.56680880865,
                      364182.53815426567, 378805.84049054456, 394592.4676526595, 413003.5330456855, 432755.44181922055,
                      455126.8688629394, 480679.7690682692, 509089.1975872646, 541695.5102145289, 579710.9467432161,
                      622911.4405706659, 672620.5846303831, 733459.2572899673, 804693.627420498, 894012.6288832778,
                      1430626.720406391, 53900415.599804915, 1011815782.6290262, 3202713598.216778, 9928263123.100431,
                      44325021426.96483, 100586724448.80434, 99982378186.28044, 105829074711.9932, 101245587893.54852,
                      80086652051.91331, 98753484919.10834, 175082902754.43454, 239915068778.5008, 167553698134.00705,
                      190546467373.14307, 140927173150.98337, 188745076540.75528, 282195110778.18304, 465447989353.9986,
                      496596643440.26447, 264973007522.25906, 229809516773.09958, 292692510587.8797, 21818108296582.934,
                      37222724596972.9])


# FUNCI√ìN PARA ENCONTRAR EL COMANDO EN BASE A LA ENERGIA
def find_command(energy_seq):
    # Se restan la energia promedio de cada comando con la de la que se capta en tiempo real
    # Para ver cual tiene menor diferencia
    differences = []
    up = abs(arriba - energy_seq)
    down = abs(abajo - energy_seq)
    right = abs(derecha - energy_seq)
    left = abs(izquierda - energy_seq)

    # se separan las diferencias por parte
    # Por ejemplo si tuvieramos estas diferencias:
    # up = [1,2,3,4]
    # down = [5,6,7,8]
    # right = [9,1,2,3]
    # left = [4,5,6,7]
    # Entonces este for haria lo siguiente:
    # differences = [[1,5,9,4],[2,6,1,6],[3,7,2,7],[4,8,3,7]]
    # Es decir que crea un vector que tiene dentro vectores con las diferencias de cada parte
    # independientemente de el comando
    for i3 in range(0, nparts):
        difference = [up[i3], down[i3], right[i3], left[i3]]
        differences.append(difference)

    # luego con el vector que se creo se busca cual fue el menor de cada parte
    # siguiendo con el ejemplo anterior:
    # differences = [[1,5,9,4],[2,6,1,6],[3,7,2,7],[4,8,3,7]]
    # se busca el menor de cada uno y se guarda la posicion,
    # para la primera parte el menor es 1 por eso se guardaria 0 que es la posicione en la que esta,
    # entonces quedaria asi:
    # min_differences = [0,2,2,2]
    min_differences = []
    for i4 in range(0, 4):
        index = differences[i4].index(min(differences[i4]))
        min_differences.append(index)

    # Ahora se maneja una especie de sistema de puntos para encontar el que tuvo menor diferencia
    # Para esto entonces se cuenta cuantas veces aparece una posicion
    # En el caso del ejemplo, ya que tenemos 4 posiciones entonces contamos cuantas veces estan
    # 0, 1, 2, 3 en el vector min_differences:
    # count = [1, 0, 3, 0]
    count = []
    for i5 in range(0, 4):
        count.append(min_differences.count(i5))

    # Luego se mira quien fue el que tuvo mas "puntos" y se toma ese como el comando que probablemente
    # se dijo
    return commands[count.index(max(count))]


# -------------------------------- IGNORAR ---------------------------------------
# Esto sirve para comprobar que tan exacto es el algoritmo despues de entrenarlo,
# usando las grabaciones como si fuera alguien hablando en tiempo real
#
for i in range(0, len(commands)):
    print("_______________" + commands[i].upper() + "_______________")
    for j in range(1, n + 1):
        file = folder + commands[i] + str(j) + ".wav"
        ffts = calc.calculate_fft_record(file)  # se calcula la transformada de fourier de la grabaci√≥n

        parts = calc.split(ffts, nparts)

        energy_sequence = []
        for k in range(0, nparts):
            energy_sequence.append(calc.calculate_energy(parts[k]))  # se calcula y guarda la energ√≠a de la parte uno
            # del vector
            # de la transformada de fourier de la grabaci√≥n

        command = find_command(energy_sequence)

        if command == "arriba":
            a = a + 1
        elif command == "abajo":
            b = b + 1
        elif command == "derecha":
            c = c + 1
        elif command == "izquierda":
            d = d + 1

    print("arriba: " + str(a))
    print("abajo: " + str(b))
    print("derecha: " + str(c))
    print("izquierda: " + str(d))
    a = b = c = d = 0
